// <auto-generated />
using System;
using BeautyNails.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeautyNails.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BeautyNails.Models.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AboutCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("About", (string)null);
                });

            modelBuilder.Entity("BeautyNails.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Bio = "Blabla",
                            BirthDay = new DateTime(2023, 2, 22, 0, 44, 8, 172, DateTimeKind.Local).AddTicks(7060),
                            ConcurrencyStamp = "6977a4da-7942-4dea-98c1-99a7468c627f",
                            DisplayName = "Jp",
                            Email = "Jacob@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JACOB@MAIL.COM",
                            NormalizedUserName = "JACOB@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEE8GmLg983R2u0aiTpm1egvLb+HUU90ehfOTDsUtoWmluAAtZQBY7v3L0tkrpTmylg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ed69676-1f16-4423-8f3a-06c16fa5669a",
                            TwoFactorEnabled = false,
                            UserName = "Jacob@mail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Bio = "Blabla",
                            ConcurrencyStamp = "f21b674b-d099-427b-b876-5568fb89a938",
                            DisplayName = "Los",
                            Email = "Aleksandra@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEKSANDRA@MAIL.COM",
                            NormalizedUserName = "ALEKSANDRA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEImfkAtVY8rukV9f/PrH6sL3WcxnKagOa/gOj5axwSG8Cb78UAWaWn7Bji0IyfCVug==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "731a15d8-03de-40b3-b9ea-ee361f8f6726",
                            TwoFactorEnabled = false,
                            UserName = "Aleksandra@mail.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Bio = "Blabla",
                            ConcurrencyStamp = "6ba34371-3c2d-47d7-9e04-581c4aa0675f",
                            DisplayName = "User",
                            Email = "User@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@MAIL.COM",
                            NormalizedUserName = "USER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECl0wiZTKG2TqT0/I7q35kbjgtgrHiBrXaj+jhqSHMxzmo+ldb5Q6Of3Z7WF4bMMgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "741059b6-1f90-4141-b3d2-fbbaf68928aa",
                            TwoFactorEnabled = false,
                            UserName = "User@mail.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Bio = "Blabla",
                            BirthDay = new DateTime(2023, 2, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ConcurrencyStamp = "f891bb04-6236-4236-bd40-4efa10cde077",
                            DisplayName = "Henke",
                            Email = "Henrik@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HENRIK@MAIL.COM",
                            NormalizedUserName = "HENRIK@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAy1wpVLT3RnGnpJMNahGA1lcN8mkEtE/3WsnfYVzhLM92rJ7Di8Ddj6tXkOqlZvzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d567034e-92da-4226-a100-1cb696729ab8",
                            TwoFactorEnabled = false,
                            UserName = "Henrik@mail.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Bio = "Blabla",
                            BirthDay = new DateTime(2023, 2, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ConcurrencyStamp = "6d76f2b1-a549-4bc9-b132-ca742c37c686",
                            DisplayName = "Kallan",
                            Email = "Kalle@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KALLE@MAIL.COM",
                            NormalizedUserName = "KALLE@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAufgwOcUDrh7Bi/KdacqM9kJLD5jGiGhkaYxybhkj78Cnp3nYEyj8xXXE9bRYEXXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "811bc41e-74ca-4aab-b74b-6055baba66d4",
                            TwoFactorEnabled = false,
                            UserName = "Kalle@mail.com"
                        });
                });

            modelBuilder.Entity("BeautyNails.Models.Checkout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BookedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("CheckOut", (string)null);
                });

            modelBuilder.Entity("BeautyNails.Models.DaysOpen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AboutId")
                        .HasColumnType("int");

                    b.Property<string>("DaysAndTimeOpen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.ToTable("DaysOpen", (string)null);
                });

            modelBuilder.Entity("BeautyNails.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeToFinnish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c3e7f34b-296f-4901-8d39-20cd4351b0b1"),
                            Price = 22.0,
                            ProductDescription = "Nagellack som är coolt",
                            ProductName = "Nagellack",
                            TimeToFinnish = "60"
                        },
                        new
                        {
                            Id = new Guid("a1209a1c-fa0d-48b1-8b02-d0ec41dc4a66"),
                            Price = 300.0,
                            ProductDescription = "Manikyr för coola män",
                            ProductName = "Manikyr",
                            TimeToFinnish = "30"
                        },
                        new
                        {
                            Id = new Guid("c4a5a7b5-b3d7-49cd-94d6-441c12481522"),
                            Price = 150.0,
                            ProductDescription = "Mer volym för dina fransar",
                            ProductName = "Volymfransar",
                            TimeToFinnish = "90"
                        },
                        new
                        {
                            Id = new Guid("18ecccf3-7f5a-4619-8e97-4fb7bb2e6326"),
                            Price = 200.0,
                            ProductDescription = "Om du vill ha ont och betala för det",
                            ProductName = "Massage",
                            TimeToFinnish = "120"
                        },
                        new
                        {
                            Id = new Guid("4047ccdb-6e28-4d7a-a86d-d654e29ccd11"),
                            Price = 600.0,
                            ProductDescription = "Test1",
                            ProductName = "Test1",
                            TimeToFinnish = "100"
                        },
                        new
                        {
                            Id = new Guid("88db2293-d067-4e7b-802c-37f83dfb0c3f"),
                            Price = 190.0,
                            ProductDescription = "Test2",
                            ProductName = "Test2",
                            TimeToFinnish = "50"
                        });
                });

            modelBuilder.Entity("BeautyNails.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BeautyNails.Models.Checkout", b =>
                {
                    b.HasOne("BeautyNails.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyNails.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeautyNails.Models.DaysOpen", b =>
                {
                    b.HasOne("BeautyNails.Models.About", null)
                        .WithMany("DaysOpen")
                        .HasForeignKey("AboutId");
                });

            modelBuilder.Entity("BeautyNails.Models.Review", b =>
                {
                    b.HasOne("BeautyNails.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BeautyNails.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BeautyNails.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyNails.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BeautyNails.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeautyNails.Models.About", b =>
                {
                    b.Navigation("DaysOpen");
                });
#pragma warning restore 612, 618
        }
    }
}
