// <auto-generated />
using System;
using BeautyNails.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeautyNails.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230302175933_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BeautyNails.Models.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AboutCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("About");
                });

            modelBuilder.Entity("BeautyNails.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Bio = "Blabla",
                            BirthDay = new DateTime(2023, 3, 2, 18, 59, 33, 205, DateTimeKind.Local).AddTicks(4044),
                            ConcurrencyStamp = "d952e2e9-1548-41b2-8891-15a4eb61cd76",
                            DisplayName = "Jp",
                            Email = "Jacob@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JACOB@MAIL.COM",
                            NormalizedUserName = "JACOB@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEICiM5O4wf65VCJRjN6ywPTxH4dh4VeQM/sZFMMV5t8UvVIvsxP0Vdv/Q+olPNMMMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d665d7d-33ca-490a-9e12-1ee0caeaa358",
                            TwoFactorEnabled = false,
                            UserName = "Jacob@mail.com"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Bio = "Blabla",
                            ConcurrencyStamp = "722d62c7-b050-4da1-bb5d-7e08cf179be3",
                            DisplayName = "Los",
                            Email = "Aleksandra@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEKSANDRA@MAIL.COM",
                            NormalizedUserName = "ALEKSANDRA@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN+G6zvPzTaKZ5JJtbwsCcqksQziZ2ecJm+7UKxt6wRndkRgeOTwmhXsVOJHpVkCcQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "df875b4c-4c03-499b-8168-79f20a8f9ff2",
                            TwoFactorEnabled = false,
                            UserName = "Aleksandra@mail.com"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Bio = "Blabla",
                            ConcurrencyStamp = "4cf41aac-9e32-41bb-8e74-759337300244",
                            DisplayName = "User",
                            Email = "User@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@MAIL.COM",
                            NormalizedUserName = "USER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGVIoEErU9Vy1oJcIaarIPEaxBj0+4yKnz0sPhGBGkSb7EH4NfpupU3Xv0k0ba3zyA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bccc3bc6-57d0-405a-80c0-7c42a37f2be1",
                            TwoFactorEnabled = false,
                            UserName = "User@mail.com"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Bio = "Blabla",
                            BirthDay = new DateTime(2023, 3, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            ConcurrencyStamp = "f494615c-78f3-42e5-91e5-5ec2987412de",
                            DisplayName = "Henke",
                            Email = "Henrik@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "HENRIK@MAIL.COM",
                            NormalizedUserName = "HENRIK@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL2nC5eS5hkXNsVCj3FjHoT1v93uz9Muutgfh7LMW+vpnPEafTyNNrPQGZezwBS3KA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "078d7529-6c9b-4742-a09d-95accb124d25",
                            TwoFactorEnabled = false,
                            UserName = "Henrik@mail.com"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Bio = "Blabla",
                            BirthDay = new DateTime(2023, 3, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            ConcurrencyStamp = "9678d7ff-9ecb-4cdd-88be-bdd285fb70d8",
                            DisplayName = "Kallan",
                            Email = "Kalle@mail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "KALLE@MAIL.COM",
                            NormalizedUserName = "KALLE@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED8nciejLyogUcxsp746m+Fq5DvxaifQH+TLteVyqMeBmh8fpnILN1I67IWHT61QsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ab21d65-1793-4fa2-a70a-93cba89f5530",
                            TwoFactorEnabled = false,
                            UserName = "Kalle@mail.com"
                        });
                });

            modelBuilder.Entity("BeautyNails.Models.Checkout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BookedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("CheckOut");
                });

            modelBuilder.Entity("BeautyNails.Models.DaysOpen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AboutId")
                        .HasColumnType("int");

                    b.Property<string>("DaysAndTimeOpen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AboutId");

                    b.ToTable("DaysOpen");
                });

            modelBuilder.Entity("BeautyNails.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeToFinnish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66e2be83-e07e-410f-bd8d-683c508d3efb"),
                            Price = 270.0,
                            ProductDescription = "Ombre/Fransk",
                            ProductName = "Nagellack",
                            TimeToFinnish = "60"
                        },
                        new
                        {
                            Id = new Guid("ec5099bd-e912-45ee-8aa4-899aa2616659"),
                            Price = 300.0,
                            ProductDescription = "Nagelförstärkning med gele eller akryl naturligt utan färg.",
                            ProductName = "Manikyr",
                            TimeToFinnish = "30"
                        },
                        new
                        {
                            Id = new Guid("1a846f5e-70e6-437b-8036-554c7d71793b"),
                            Price = 150.0,
                            ProductDescription = "Med volym fransar använder man sig av tjocklek 0,07 mm, istället för singelfransar. Tekniken med dessa supertunna fransar, är att du applicerar 2-6 st lösfransar på kundens egen frans, istället för en lösfrans. Denna metod är lika skonsam som vanliga singel fransar eftersom volymfransar är väldigt lätta och tunna fransar.",
                            ProductName = "Volymfransar",
                            TimeToFinnish = "90"
                        },
                        new
                        {
                            Id = new Guid("97c977be-8dff-4840-8ee9-06647de95c67"),
                            Price = 900.0,
                            ProductDescription = "Massage hjälper kropp och själ att må bra och komma i balans. Våra massageterapeuter har flera års erfarenhet inom branschen och anpassar behandlingarna efter dina önskemål och behov. En massage, oavsett vilken variant du väljer, har en lugnande och avslappnande verkan. Med en massage blir musklerna mjukare, blodcirkulationen i kroppen förbättras och själen får ro. Med regelbunden massage kan man i det flesta fall förebygga muskelspänningar och värk.",
                            ProductName = "Massage",
                            TimeToFinnish = "80"
                        },
                        new
                        {
                            Id = new Guid("2bc7da66-bd34-4ea5-8bbb-01ba5a2255f1"),
                            Price = 2900.0,
                            ProductDescription = "Vid Microblading skapar man illusionen av ett hårstrå. Med hjälp av ett handverktyg med mikronålar i tatuerar man in pigment som sedan sitter ca 1-3 år, detta är individuellt och beror på flera faktorer som till exempel din hudtyp, din ålder och hur du sköter tatueringen.",
                            ProductName = "Microblading",
                            TimeToFinnish = "120"
                        },
                        new
                        {
                            Id = new Guid("5b9dc23c-89fd-4012-b93f-d0b67e6073ed"),
                            Price = 450.0,
                            ProductDescription = "Fixa fötterna",
                            ProductName = "Pedikyr",
                            TimeToFinnish = "30"
                        });
                });

            modelBuilder.Entity("BeautyNails.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "4",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BeautyNails.Models.Checkout", b =>
                {
                    b.HasOne("BeautyNails.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyNails.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeautyNails.Models.DaysOpen", b =>
                {
                    b.HasOne("BeautyNails.Models.About", null)
                        .WithMany("DaysOpen")
                        .HasForeignKey("AboutId");
                });

            modelBuilder.Entity("BeautyNails.Models.Review", b =>
                {
                    b.HasOne("BeautyNails.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BeautyNails.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BeautyNails.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeautyNails.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BeautyNails.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeautyNails.Models.About", b =>
                {
                    b.Navigation("DaysOpen");
                });
#pragma warning restore 612, 618
        }
    }
}
